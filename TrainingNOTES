
https://github.com/iamdevopstrainer/ github location  for devops training
https://github.com/abhishake76/devopsedureka my github

Edit firewall options for http to allow custome port like 8080 8090

Add for SELinux policy custom port for http tomcat to OS 
sudo semanage port -a -t http_port_t -p tcp 8090

Add jenkins users for sudo activity, open 
sudo vi /etc/sudoers
or 
sudo visudo
Add at end of file 
jenkins ALL=(ALL) NOPASSWD: ALL


allow passwrod login in google cloud
etc/ssh/sshd_config
change password control to yes
systemctl restart sshd.service


add user
useradd -d /home/jenkins -m jenkins
passwd jenkins 

add <JENKINS_HOME>/.ssh/known_host file and add entry for master jenkins

Docker:
$ sudo yum install -y yum-utils

$ sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo
	
$ sudo yum install docker-ce docker-ce-cli containerd.io

start docker
systemctl start docker

docker run -itd ubuntu (detached mode)
docker run -it ubuntu (Attached mode, come out from terminal with CTRL p CTRL q, exit/Ctrl c/d will kill your container)
execute conmand in detached container
docker exec -it 436fa7b8e560<container id> /bin/bash (connected to root mode)

copy file from root to host
docker cp /root/abc.txt 436fa7b8e560:/usr/local/apache2/htdocs 

copy  by mapping the volume at start of container
docker run -itd -P -v /root/data:/usr/local/apache2/htdocs httpd_abhi

create image from docker
docker commit <docker_id>


create with docker file

FROM centos:latest
MAINTAINER abhishake76
RUN yum -y install httpd
COPY appplication.html /var/www/html
CMD ["/usr/sbin/httpd", "-D", "FOREGROUND"]
EXPOSE 80

create imahge from Dockerfle
docker build ./

tag docker image before push to update with repository id on dockerhub server
docker tag myhhtpd:v1 abhishake76/devops:v1

[root@masterdevops ~]# docker images
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
abhishake76/devops   v1                  bf0d0e24bad1        23 hours ago        254MB
myhhtpd              v1                  bf0d0e24bad1        23 hours ago        254MB

docker push
docker push abhishake76/devops:v1


docker swarm is bundled with docker
docker swarm start on master
docker swarm init --advertise-addr 10.xxx.xx.xx

To join master, see the above putput and use below command to join master
docker swarm join --token SWMTKN-1-432hngh9612v89xs2oa71p4bfa9skyqdxqdw4l7m0jlmu4diph-1po7ofc84zjpb0r0gfh6p58dm 10.128.0.2:2377

to see docker nodes
dokcer node ls

see docker network
docket network ls

inspect service
docker inspect

start service
docker service create --name devops_httpd -p 8888:80 httpd
				(service name)	
see docker service list
docker service ls

see docker service process
docker service ps <service_name>

increase replicas for service in docker
docker service scale devops_httpd=3

update docker service command:
docker service update --image <image> <service>
docker service update --image abhishake76/httpd:v2 httpd


install kubeadm for kubernetes:
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

# Set SELinux in permissive mode (effectively disabling it)
sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

sudo systemctl enable --now kubelet



kubeadm init --ignore-preflight-errors=NumCPU --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=10.128.0.2

kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
  
  **copy config to all worker nodes
  
  You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.128.0.2:6443 --token 1mt32i.k58wewdm1zc6d48b \
    --discovery-token-ca-cert-hash sha256:2eec3041445b378acdf71c4661e30fd14cfbe0375ed0e95f2c1e9bb911be7cd7


kubernetes pod yaml file. One pod and deployment file:

init and start pod
kubectl apply -f httpd-pod.yaml(deployment/pod yaml)

kubectl describe pod httpd-pod-1

remove pod
kubectl delete -f httpd-pod.yaml

kubectl get deployment
kubectly get nodes

to scale up replicas in deployment
kubectl scale deploy httpd-dep --replicas=2

Pod Dfinition: httpd-pod.yaml

---
apiVersion: v1
kind: Pod
metadata:
 name: httpd-pod-1
 labels:
  app: httpd-pod-demo
spec:
 containers:
 - name: httpd-cont-1
   image: httpd
   ports:
   - containerPort: 80
 - name: abhi-httpd
   image: abhishake76/devops:v1
   ports:
   - containerPort: 80



Deployment definition: 
akms
appVersion, kind, metadata, specs

---
apiVersion: apps/v1
kind: Deployment
metadata:
 name: httpd-dep
spec:
 replicas: 2
 selector: 
  matchLabels:
   app: httpd-app
 template:
  metadata:
   name: httpd-pod-dep
   labels:
    app: httpd-app
  spec:
   containers:
   - name: httpd-cont-1
     image: httpd
     ports:
    - containerPort: 80


service yml
---
apiVersion: v1
kind: Service
metadata:
 name: httpd-service
spec:
 ports:
 - port: 9999
   targetPort: 80
   nodePort: 31000
   protocol: TCP
 selector:
  app: httpd-app
 type: NodePort
 
 With type cluster IP, all cluster are available at single IP. with nodeport type you define a nodeport as well

zero downtime deployment example is blue green delpoyment for node's application upgrade where old nodes are kept running and new node cluster is added
in external load balancer.

to establish ssh public private key pair
it generates key id_rsa and id_rsa.pub
$ ssh-keygen

copy id_rsa.pub to authorized_keys file in slave /root/.ssh/.

[root@masterdevops .ssh]# vi /etc/ssh/sshd_config
set PermitRootLogin to yes and restart sshd
[root@masterdevops .ssh]# systemctl restart sshd


to install ansible
yum install epel-release
yum install ansible
define ansible groups in /etc/ansible/hosts
[all]

ansible module command
ansible -m <module> -a <args> <group>




ansible -m <ping> <group>

ansible -m copy -a "src=/tmp/ansibletest.txt dest=/root" webserver
it overwrite file only if chksum is different
chksum filename    to see change in file timestamp

ansimble -m yum to install packages on remote worker server
ansible -m service to start/stop/status manage services

write playbook in yaml to include all the tasks in ansible
execute playbook to run all commands in one go

roles > playbooks > play(s) > tasks > modules

playbook can be contain mutiple plays
---
- hosts: webserver
  tasks:
  - name: Checking the PING on all webservers
    ping: 
  - name: Install HTTPD package
    yum: name=httpd state=present
  - name: Start HTTPD service
    service: name=httpd state=started
  - name: Copy an application file
    copy: src=/tmp/ansibletest.txt dest=/var/www/html/

check syntax playbook
ansible-playbook httpd-playbook.yml --syntax-check
   
dry run 
ansible-playbook --check httpd-playbook.yml

run playbook
ansible-playbook httpd-playbook.yml


downloading roles
https://galaxy.ansible.com/t

yum install tree to see list of file in tree directory

ansible-galaxy install geerlingguy.mysql
installed in /root/.ansible/roles/geerlingguy.mysql/
create your own role
cd /etc/ansible/roles
Make role directory in /etc/ansible/roll like httpd-role and for eg init role http to understand
ansbile-galaxy init httpd-role
above command creates httpd-role directory for difining our custom role.
mutiple directory gets created with each directory having main.yml to do some specfic operations
primary file for role is tasks/main.yml
copy playbook definition in this main.yml.
change file source to relative directory with respect to files directory.
so files directory in httpd-role is source directory for files.
---
# tasks file for httpd-role
- name: Checking the PING on all webservers
  ping:
- name: Install HTTPD package
  yum: name=httpd state=present
- name: Start HTTPD service
  service: name=httpd state=started
- name: Copy an application file
  copy: src=ansibletest.txt dest=/var/www/html/

use role in playbook.
---
- hosts: webserver
  roles:
    - httpd-role

you can use variable inside vars configuration section with internal definition or as an external variable
---
- hosts: webserver
  vars:
    filename1: ansibletest.txt
    filename: "{{efilename}}"
  tasks:
  - name: Copy an application file
    copy: src=/tmp/{{filename}} dest=/var/www/html/
  
  extrenal defnition
  ansible-playbook httpd-playbook.yml -e "efilename=ansibletest.txt1"




monitoring tool
grafana premises

jenkins poll Scm to trigger pipleline with a cron job H**2




