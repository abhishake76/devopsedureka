
Edit firewall options for http to allow custome port like 8080 8090

Add for SELinux policy custom port for http tomcat to OS 
sudo semanage port -a -t http_port_t -p tcp 8090

Add jenkins users for sudo activity, open 
sudo vi /etc/sudoers
or 
sudo visudo
Add at end of file 
jenkins ALL=(ALL) NOPASSWD: ALL


allow passwrod login in google cloud
etc/ssh/sshd_config
change password control to yes
systemctl restart sshd.service


add user
useradd -d /home/jenkins -m jenkins
passwd jenkins 

add <JENKINS_HOME>/.ssh/known_host file and add entry for master jenkins

Docker:
$ sudo yum install -y yum-utils

$ sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo
	
$ sudo yum install docker-ce docker-ce-cli containerd.io

start docker
systemctl start docker

docker run -itd ubuntu (detached mode)
docker run -it ubuntu (Attached mode, come out from terminal with CTRL p CTRL q, exit/Ctrl c/d will kill your container)
execute conmand in detached container
docker exec -it 436fa7b8e560<container id> /bin/bash (connected to root mode)

copy file from root to host
docker cp /root/abc.txt 436fa7b8e560:/usr/local/apache2/htdocs 

copy  by mapping the volume at start of container
docker run -itd -P -v /root/data:/usr/local/apache2/htdocs httpd_abhi

create image from docker
docker commit <docker_id>


create with docker file

FROM centos:latest
MAINTAINER abhishake76
RUN yum -y install httpd
COPY appplication.html /var/www/html
CMD ["/usr/sbin/httpd", "-D", "FOREGROUND"]
EXPOSE 80


tag docker image before push to update with repository id on dockerhub server
docker tag myhhtpd:v1 abhishake76/devops:v1

[root@masterdevops ~]# docker images
REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE
abhishake76/devops   v1                  bf0d0e24bad1        23 hours ago        254MB
myhhtpd              v1                  bf0d0e24bad1        23 hours ago        254MB

docker push
docker push abhishake76/devops:v1


docker swarm is bundled with docker
docker swarm start on master
docker swarm init --advertise-addr 10.xxx.xx.xx

To join master, see the above putput and use below command to join master
docker swarm join --token SWMTKN-1-432hngh9612v89xs2oa71p4bfa9skyqdxqdw4l7m0jlmu4diph-1po7ofc84zjpb0r0gfh6p58dm 10.128.0.2:2377

to see docker nodes
dokcer node ls

see docker network
docket network ls

start service
docker service create --name devops_httpd -p 8888:80 httpd
				(service name)	
see docker service list
docker service ls

see docker service process
docker service ps <service_name>

increase replicas for service in docker
docker service scale devops_httpd=3

update docker service command:
docker service update --image <image> <service>
docker service update --image abhishake76/httpd:v2 httpd


install kubeadm for kubernetes:
cat <<EOF | sudo tee /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\$basearch
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kubelet kubeadm kubectl
EOF

# Set SELinux in permissive mode (effectively disabling it)
sudo setenforce 0
sudo sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config

sudo yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes

sudo systemctl enable --now kubelet



kubeadm init --ignore-preflight-errors=NumCPU --pod-network-cidr=192.168.0.0/16 --apiserver-advertise-address=10.128.0.2

kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
  
  **copy config to all worker nodes
  
  You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 10.128.0.2:6443 --token 1mt32i.k58wewdm1zc6d48b \
    --discovery-token-ca-cert-hash sha256:2eec3041445b378acdf71c4661e30fd14cfbe0375ed0e95f2c1e9bb911be7cd7














