
If you put r or R in front of any statement in print command, the string will be printed as raw string with all tags like \n \t printed as it is rathe than them getting converte into space characters
formatters like %d, %s will still be translated into real values in raw format string if we do pass values of formatter.

python is case sensitive language

quotes type is fluid at start of string and can be mix of ' and ".
End of string is determined by same set of string

There is a complex data type also in python like C=10+6j

Python is indendation level block language like YAML

str is a datatype keyword in python, but can be reassigned as a variable
str = 1
int ='a'

In spyder, you need to save file before you can execute each line in the file.

In python lexicography, capital alphabets have low lexicography number than small lexicography number.
That is capital letter is stored  before small letters in computer storage 

for index method, if searched char/string is not there it will trhow error. 
find method will return -1 in this case.

dir() will  list all  variable inlcuding non declared valriables (prefixed with _) used in that python program memory

str[::-1] will print string in reverse order

concatenation will NOT work for str + int and int + str.
datattypes should be same for addition/concatenation
You can multiply string with numeral A*20 means A will be concatenated 20 times
Same multiplication you can do with Tuple

Tuples are unmutatable tup =(1,2) whereas list is mutable list1 = [1,2]

del method is used to remove item based on indext value.
remove method is used to remove first item based on value.
del(list[1])
list.remove('Abhi')
append will add one element at end to list
extend will add all elements to list from provided data.

Dictionary key has to be string or int. Value can be any object.
If you put duplicate keys, then latest occurance of key,value pair is taken in consideration
dict[key] gives value
dict[key] set value
del(dict[20]) deletes key value pair
dict.get(key) will not return error if key is no present
dict = {3:'Python', 4:'Java' }

Set has unique set of values
A={12,2,3}
you can convert list to set to remove duplicates
You can execute set operation like A-B or B-A or A|B (A union of B) or A&B (A intersection of B)  for set datatype
A[value] will give value
Other syntax for set operation is 
s={1,2,3,'a','c','b'}
set1={1,'a','b'}
print(3 not in Org)
print(set1.issubset(s))
print(3 not in s)
print(s.issuperset(set1))
print(s.union(set1))
print(s.intersection(set1))
print(s.difference(set1))
print(s.symmetric_difference(set1))
symeetric difference will look at values with their index to diff two sets


Add, remove, discard to add remove values
remove will give error if value is not present
discard will ignore the error
Set.pop will remove the first occurance of value

for logical operator and,or,not
a=10, b=20
print (a and b) will return value of last value scanned , in this case b
print (a or b) will return value of first value scanned , in this case a
print (not a) will return boolena value

for bitwise operator
a&b, a|b, a^b(XOR)
a=10, b=35
It will convert a and b into 8 bit number and then apply bit operator
print shift bits (a<<2)
reverse 0 by 1 and 1 by 0 ~a
XOR menas use OR result only if two bits are different. If two bits are on or off, then that bit it is considered as false.


Identity operator 'is' compares reference of variables
== operator compares values of variables

increments is done like a+=1 and not as a++

range(n) gives values from 0 to n-1 and you can use it to iterate.

iterator stamtmet end with :
while (ranl>1):
 print('hello')
 break

Breaking from loop
break       :will break the lo
continue    :will stop execution of current iteration and continue with next iteration
pass        :dummy statement which does not change position of cursor and helps in complete of syntax of statements like if,else etc
if (j==5):
 print(j)
else:
 pass
You cand use break and continue only inside a loop, wherewas pass can be used anywhere

str1=input("Enter your input")
input is always string value. typecast into value as required

file operations:
Use \\ in path or start file path with r for using file path string as is without any formatting transformation
newfile=open(r"C:\\Training_Py.txt","a+")
a mode will append to file
w mode will create/overide a new file and allow only write into file
r mode will only allow to read the file
w+, r+, a+ will allow both read and write.
r+ will allow to read and write the data.
diff between w+ and r+ mode is:
    w+ will create/override a new file
    w+, r+ will put cursor place at 0, a+ will put the cursor position at end of file by default
    r+ mode will only allow change of file cursor so r+ is preffered to write data at any cursor place
The file operations are done in memory and changes are done to file only when file is closed
newfile.close()

newfile.tell() gives the file cursor
newfile.seek(100) will change the file curosr to  100 position

newfile.readline() will read one line
newfile.readlines() will read all lines

for line in open("Abhi.csv", "r"):
    print(line)

read in reversed order, last line first and first line last
for line in reversed(list(open("Abhi.csv", "r"))

os.getcwd gives current working directory
os.path.join joins two paths with right separator

os.rename to rename or move the file to different path

dir (command) will give list of operation on that command like dir(os)
dir() will give list of all variables(user defined and kernel generated) and user defined functions initialized in a program

inside a function you can use a variable defined outside the block with global identifier
x=10
def add (a,b)
 global x
 x= x + 1 
 return a + b + x
 
User can define a fuction with a same name as inbuilt function and for user program definition of user defined function will be used

sorted function is available in python 3. sort funvtion is not available in python 3.

study >>>> map,filter,reduce

def greet (*name) //arbitrary arguement
*name is tuple with mutiple dynamic length of variable count
greet ("hi", "bye")
greet ("hello")
greet([5,6], "Hello")

def bar (a,b,**name) //key value of variable length arguement
**name is dictionary with mutiple dynamic length of variable count
bar(1,2, name="hello", class="2")

combination of both
def myFunction(arg1, arg2, arg3, *args, **kwargs):
myFunction(1(arg1), 2(arg2), 3(arg3), 4, 5, ['6', 7]( 3variable *args), name='Mandar', country='India', age=25(3 variabl for **args))


OOPs
class ABC():
 def __init__(self): //constructor
  self.__pri="I am Private"
  self._pro="I am Protected"
  self.pub="I am Public"
 
 def __del__(self):
  //destructor

__ two underscore for private variable methods
_ one underscore for protected variable methods
no underscore for public variable methods

you can access private method like this which is not recommended
#obj.__myPrivateMethod()
obj._MyClass__myPrivateMethod()
  
self is the instance of the class and needs to be mandatorily defined in method definition
if you are not defining self in a @classmethod, then first arg will be considered the reference of the object being called
class Date:
	def __init__(self, year, month, day): #year-month-day
			# print("init")
	@classmethod
	def dmy(cls, day, month, year): #day-month-year
		# print("dmy")

you can define subclass of above class as below
class customDate(Date):
 pass
 
try catch can be printed with sys.exc_info()
try:
 print(y)
except:
 print("Oops!",sys.exc_info()[0],"occured")
finally: #optional
 pass
 

multi inheritance is allowed in python.
if both classes has same method or variable, the class which is defnied first in extension will be considered.

pandas read files in memories
You can read chunks of data to avoid memory load size issues



End
